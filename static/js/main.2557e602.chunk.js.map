{"version":3,"sources":["views/CalculatorHeader.js","views/CalculatorButtonView.js","components/CalculatorButtons.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorHeader","props","useState","smallText","setSmallText","largeText","setLargeText","useEffect","isFlag","numberOne","result","text","subResult","currentAction","drawSmallText","className","CalculatorButtonView","onClick","handlerClickButton","action","classes","number","CalculatorButtons","clickDistributor","e","clickOnNumber","Calculator","setNumberOne","res","setRes","subRes","setSubRes","setCurrentAction","setIsFlag","countResult","Number","length","toString","includes","split","pop","isLengthOfDecimalPart","toFixed","newStringNumber","String","console","log","clickOnAction","comma","numberToArray","i","backspace","equal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2557e602.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nfunction CalculatorHeader(props) {\r\n    let [smallText, setSmallText] = useState('') \r\n    let [largeText, setLargeText] = useState('0') \r\n    \r\n   \r\n    useEffect( () => {\r\n        drawLargeText()\r\n        drawSmallText() \r\n    }) \r\n\r\n    function drawSmallText() { \r\n        let text\r\n        if(props.subResult !== 0 && props.isFlag ) { \r\n            text = props.subResult + ' ' + props.currentAction + ' ' \r\n        } else { \r\n            text = ''\r\n        }\r\n        setSmallText(text)\r\n    }\r\n\r\n    function drawLargeText() { \r\n        if(props.isFlag) {\r\n            setLargeText(props.numberOne)\r\n        } else { \r\n            if( props.result !== 0) setLargeText(props.result) \r\n            else setLargeText(props.numberOne)\r\n        }  \r\n    } \r\n\r\n    return (\r\n        <div className='calc-container_header'>\r\n           \r\n            <div className='d-flex flex-column my-4'>\r\n               <span>subResult={props.subResult}  </span>\r\n               <span> numberOne={props.numberOne}</span> \r\n               <b>_________________</b>\r\n               <span>result={props.result} </span>\r\n               <span> currentAction={props.currentAction} </span>\r\n               <span> flag={`${props.isFlag }`} </span>\r\n            </div>\r\n\r\n            <div className='calc-container_header__small' >\r\n                { smallText }\r\n            </div>\r\n           \r\n            <div className={`${largeText === '0' ? 'zero' : '' } calc-container_header__large`} >\r\n               { largeText }\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorHeader\r\n","import React from 'react' \r\n\r\nfunction CalculatorButtonView(props) {\r\n    return (\r\n        <div className='calc-button' onClick={ () => { props.handlerClickButton(props.action) }}>\r\n            <span className={`${props.classes}`} > { props.number }</span>\r\n        </div>\r\n    )\r\n}\r\n  \r\n\r\nexport default CalculatorButtonView\r\n\r\n","import React from 'react'\r\nimport CalculatorButton from '../views/CalculatorButtonView' \r\n\r\nfunction CalculatorButtons(props) {\r\n  \r\n    function clickDistributor(e) {  \r\n        if(typeof(e) === 'number') { \r\n            props.clickOnNumber(e) \r\n        }\r\n        else { \r\n            props.clickDistributor(e)  \r\n        }\r\n    } \r\n  \r\n    return ( \r\n        <div className='calc-container_buttons'>\r\n            \r\n            <CalculatorButton \r\n                number='' \r\n                classes='small' \r\n                action='history'\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                classes='clear' \r\n                number='C'   \r\n                action='clear'\r\n                handlerClickButton={clickDistributor} \r\n            /> \r\n            <CalculatorButton \r\n                classes='icon-left-1 icon' \r\n                action='backspace'\r\n                handlerClickButton={clickDistributor} \r\n            /> \r\n            <CalculatorButton \r\n                classes='icon-divide icon' \r\n                action='/'\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='7' \r\n                action={7}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='8' \r\n                action={8}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='9' \r\n                action={9}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                classes='icon-cancel icon' \r\n                action='*'\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='4' \r\n                action={4}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='5' \r\n                action={5}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='6' \r\n                action={6}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                classes='icon-minus icon' \r\n                action='-'\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='1' \r\n                action={1}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='2' \r\n                action={2}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='3' \r\n                action={3}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                classes='icon-plus icon' \r\n                action='+'\r\n                handlerClickButton={clickDistributor} \r\n            /> \r\n            <CalculatorButton \r\n                number=' ' \r\n                action={'history'}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                number='0'\r\n                action={0}\r\n                handlerClickButton={clickDistributor}  \r\n            />\r\n            <CalculatorButton \r\n                number=',' \r\n                action={'comma'}\r\n                handlerClickButton={clickDistributor} \r\n            />\r\n            <CalculatorButton \r\n                classes='icon-eq icon'\r\n                action='equal'\r\n                handlerClickButton={clickDistributor} \r\n            />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorButtons\r\n","import React, {useState} from 'react' \r\nimport CalculatorHeader from '../views/CalculatorHeader'\r\nimport CalculatorButtons from './CalculatorButtons'\r\n\r\nfunction Calculator(props) { \r\n \r\n    let error = 'realy??'\r\n\r\n    let [numberOne, setNumberOne] = useState('0') \r\n    // let [numberTwo, setNumberTwo] = useState(0) \r\n    let [res, setRes] = useState(0)\r\n    let [subRes, setSubRes] = useState(0)\r\n    let [currentAction, setCurrentAction] = useState(null)\r\n    let [isFlag, setIsFlag] = useState(false) \r\n\r\n \r\n    function clickOnNumber(e) { \r\n     \r\n        //после клика на Равно обнулить прошлые операции \r\n        if(currentAction==null && res !==0) {  \r\n            setRes(0)\r\n            setSubRes(0)\r\n        }\r\n\r\n        //запись числа \r\n        let newStringNumber = numberOne \r\n        if(newStringNumber !== 0) {\r\n            newStringNumber = String(newStringNumber)\r\n        }\r\n        newStringNumber += e\r\n        newStringNumber = Number(newStringNumber)\r\n        setNumberOne(newStringNumber)   \r\n    }\r\n\r\n    function clickDistributor(e) { \r\n      \r\n        if(e === 'equal') { \r\n            equal()\r\n            return;\r\n        }\r\n        if(e === 'backspace') { \r\n            backspace()\r\n            return;\r\n        }\r\n        if(e === 'clear') { \r\n            clear()\r\n            return;\r\n        }\r\n        if(e === 'history') { \r\n            console.log('history')\r\n            return;\r\n        }\r\n        if(e === 'comma') { \r\n            comma()\r\n            return;\r\n        }\r\n\r\n        clickOnAction(e)\r\n    }\r\n      \r\n    function clickOnAction(e) {   \r\n        //если была ошибка вычислений и результат стал строкой. Например при делении на 0\r\n        if(res === error) { \r\n            setRes(0)\r\n            setSubRes(0)  \r\n            console.log(error)\r\n            return; \r\n        }\r\n        // если второе число не было введено и был совершен повторный клик по действию(+-*/) \r\n        if(numberOne === '0') { \r\n            setCurrentAction(e)   \r\n            return;\r\n        }\r\n\r\n        let number = Number(numberOne)\r\n        if( isFlag === false ) { \r\n           if(subRes === 0) { \r\n                setSubRes(number) \r\n           } else {\r\n               setSubRes(res)\r\n           }\r\n           setNumberOne('0')  \r\n           setCurrentAction(e)  \r\n           setIsFlag(true)\r\n           return;\r\n        } \r\n        else {  \r\n            let result = countResult() \r\n            setSubRes(result) \r\n            setNumberOne('0')  \r\n            setCurrentAction(e)  \r\n        }\r\n         \r\n        \r\n    } \r\n\r\n    function comma() {  \r\n        let newStringNumber = numberOne   \r\n       \r\n        newStringNumber = String(newStringNumber)\r\n        newStringNumber += '.'\r\n \r\n        setNumberOne(newStringNumber)   \r\n    }\r\n    function equal() {  \r\n        if(isFlag) {\r\n            const result = countResult()\r\n            setRes(result) \r\n            setSubRes(result) \r\n            setNumberOne(0) \r\n\r\n            setIsFlag(false)\r\n            setCurrentAction(null)  \r\n        }\r\n        \r\n    }\r\n\r\n    function isLengthOfDecimalPart(number, length){\r\n       let lenghtDP = (number.toString().includes('.')) ? (number.toString().split('.').pop().length) : (0)  \r\n       if(lenghtDP > length) { \r\n            return true\r\n       }  \r\n       return false\r\n    }\r\n\r\n    function backspace() {  \r\n        var newStringNumber = ''\r\n        let numberToArray = String(numberOne).split('')\r\n\r\n        if(numberToArray.length > 1) { \r\n            numberToArray.pop() \r\n        }\r\n        else { \r\n            numberToArray = 0\r\n            setNumberOne(numberToArray)\r\n            return;\r\n        }  \r\n\r\n        for (let i = 0; i < numberToArray.length; i++) {  \r\n            newStringNumber += numberToArray[i] \r\n        } \r\n\r\n        setNumberOne(newStringNumber) \r\n    }\r\n\r\n    function clear() { \r\n        setIsFlag(false)\r\n        setCurrentAction(null)\r\n        setRes(0)\r\n        setSubRes(0)\r\n        setNumberOne('0')\r\n    }\r\n\r\n    function countResult () { \r\n        let result\r\n        let number = Number(numberOne) \r\n        switch(currentAction) {\r\n            case '+' : {\r\n                result = subRes + number\r\n            } ; break;\r\n            case '/' : { \r\n                if(number === 0) result = error\r\n                else result =  subRes / number\r\n            } break;\r\n            case '*' : {\r\n                result =  subRes * number\r\n            } ; break;\r\n            case '-' : {\r\n                result = subRes - number  \r\n            }; break; \r\n            default: break;\r\n        }  \r\n        if(isLengthOfDecimalPart(result, 9) && typeof(result) === 'number') { \r\n            result = result.toFixed(9)\r\n        }  \r\n        return result \r\n    }\r\n\r\n    return (\r\n        <div className=\"calc-container\"> \r\n           <CalculatorHeader \r\n                result={res}\r\n                subResult={subRes} \r\n                currentAction={currentAction}\r\n                numberOne={numberOne} \r\n                isFlag={isFlag}\r\n            />  \r\n           <CalculatorButtons  \r\n                clickOnNumber={clickOnNumber}\r\n                clickDistributor={clickDistributor}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Calculator\r\n\r\n","import React from 'react'; \nimport Calculator from './components/Calculator'\n\nfunction App() {\n  return (\n    <div className='calc container-fluid'>\n        <Calculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}